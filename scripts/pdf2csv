#!/usr/bin/env python3

"""
pdf2csv

Extract tabular data from PDF files by detecting table border lines.
"""

import sys
import shutil
import logging
import argparse
import tempfile

from pdf2csv import DEFAULT_BORDER_WIDTH, pdf_to_csv_stream
from pdf2csv.util import color_log



LOG = logging.getLogger('pdf2csv')



def parse_page_range(text):
    """
    Parse a string representation of a page range and return Integer
    values for first and last page, either or both of which may be `None`.
    """

    if not text:
        return (None, None)

    text = text.strip()

    if not text:
        return (None, None)

    try:
        page = int(text)
    except ValueError:
        pass
    else:
        return (page, page)

    (first, last) = text.split("-")

    first = int(first)
    last = int(last)

    return (first, last)




def main():
    LOG.addHandler(logging.StreamHandler())
    log_util = logging.getLogger('util')
    for log in LOG, log_util:
        color_log(log)

    parser = argparse.ArgumentParser(
        description="Scrape tabular data from PDF tables.")

    parser.add_argument(
        "--verbose", "-v",
        action="count", default=0,
        help="Print verbose information for debugging.")
    parser.add_argument(
        "--quiet", "-q",
        action="count", default=0,
        help="Suppress warnings.")

    parser.add_argument(
        "--page-range", "-p",
        action="store",
        help="Page range, starting from 1. Eg.: `2-9`.")
    parser.add_argument(
        "--border-width", "-b",
        action="store",
        type=float, default=DEFAULT_BORDER_WIDTH,
        help="Width of table borders in page units.")

    parser.add_argument(
        "--debug-dump-svg-path",
        action="store",
        help=(
            "Path to SVG output file for debug purposes. "
            "Include %d to insert page numbers."
        ))

    parser.add_argument(
        "--outfile", "-o",
        action="store",
        help="Path to CSV output file.")

    parser.add_argument(
        "pdf",
        metavar="PDF",
        help="Path to PDF input file.")

    args = parser.parse_args()

    level = (logging.ERROR, logging.WARNING, logging.INFO, logging.DEBUG)[
        max(0, min(3, 1 + args.verbose - args.quiet))]
    for log in LOG, log_util:
        log.setLevel(level)

    (page_first, page_last) = parse_page_range(args.page_range)

    def f(out):
        pdf_to_csv_stream(
            args.pdf, out,
            page_first=page_first, page_last=page_last,
            border_width=args.border_width,
            debug_dump_svg_path=args.debug_dump_svg_path
        )

    if args.outfile:
        with tempfile.NamedTemporaryFile(
            delete=False, mode="w+", encoding="utf-8"
        ) as temp:
            f(temp)
            temp.close()
            shutil.move(temp.name, args.outfile)
    else:
        f(sys.stdout)



if __name__ == '__main__':
    main()
